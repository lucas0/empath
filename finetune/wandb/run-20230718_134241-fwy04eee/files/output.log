
  0%|                                                                                                                                                                                      | 0/500 [00:00<?, ?it/s]You're using a PreTrainedTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
Traceback (most recent call last):
  File "/home/ubuntu/empath/finetune/finetune_falcon2.py", line 91, in <module>
    trainer.train()
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/transformers/trainer.py", line 1539, in train
    return inner_training_loop(
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/transformers/trainer.py", line 1809, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/transformers/trainer.py", line 2654, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/transformers/trainer.py", line 2679, in compute_loss
    outputs = model(**inputs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/utils/operations.py", line 581, in forward
    return model_forward(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/utils/operations.py", line 569, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/amp/autocast_mode.py", line 14, in decorate_autocast
    return func(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = old_forward(*args, **kwargs)
  File "/home/ubuntu/.cache/huggingface/modules/transformers_modules/tiiuae/falcon-40b-instruct/ca78eac0ed45bf64445ff0687fabba1598daebf3/modelling_RW.py", line 759, in forward
    transformer_outputs = self.transformer(
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.cache/huggingface/modules/transformers_modules/tiiuae/falcon-40b-instruct/ca78eac0ed45bf64445ff0687fabba1598daebf3/modelling_RW.py", line 654, in forward
    outputs = block(
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = old_forward(*args, **kwargs)
  File "/home/ubuntu/.cache/huggingface/modules/transformers_modules/tiiuae/falcon-40b-instruct/ca78eac0ed45bf64445ff0687fabba1598daebf3/modelling_RW.py", line 411, in forward
    mlp_output = self.mlp(ln_mlp)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = old_forward(*args, **kwargs)
  File "/home/ubuntu/.cache/huggingface/modules/transformers_modules/tiiuae/falcon-40b-instruct/ca78eac0ed45bf64445ff0687fabba1598daebf3/modelling_RW.py", line 356, in forward
    x = self.act(self.dense_h_to_4h(x))
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = old_forward(*args, **kwargs)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/bitsandbytes/nn/modules.py", line 221, in forward
    out = bnb.matmul_4bit(x, self.weight.t(), bias=bias, quant_state=self.weight.quant_state)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py", line 570, in matmul_4bit
    return MatMul4Bit.apply(A, B, out, bias, quant_state)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/torch/autograd/function.py", line 506, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py", line 515, in forward
    output = torch.nn.functional.linear(A, F.dequantize_4bit(B, state).to(A.dtype).t(), bias)
  File "/home/ubuntu/empath/finetune/venv/lib/python3.10/site-packages/bitsandbytes/functional.py", line 894, in dequantize_4bit
    out = torch.empty(shape, dtype=dtype, device=A.device)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 512.00 MiB (GPU 0; 14.58 GiB total capacity; 13.38 GiB already allocated; 95.56 MiB free; 14.36 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF